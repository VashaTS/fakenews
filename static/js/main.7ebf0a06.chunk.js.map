{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","ar1","ar2","ar3","ar4m","ar4f","ar5","ar6","rng2","Math","floor","random","Object","keys","length","ar4","values","orgstr","concat","useState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAyHeA,G,4BArHH,WAEV,IAAIC,EAAM,CACR,aACA,qBACA,+CACA,wBACA,uCACA,0CACA,cAEEC,EAAM,CACR,kCAAsB,IACtB,uBAAmB,IACnB,eAAa,IACb,mBAAe,IACf,2BAA4B,IAC5B,uBAAwB,IACxB,gBAAiB,IACjB,0BAA2B,KAEzBC,EAAM,CACR,wCACA,yCACA,cACA,qBACA,qBACA,qBACA,uDAEEC,EAAO,CACT,kCACA,uDACA,2BACA,2DACA,2DACA,wDAEEC,EAAO,CACT,mCACA,uDACA,2BACA,4DACA,4DACA,yDAEEC,EAAM,CACR,eACA,yBACA,iBACA,gCACA,qCACA,YACA,4BACA,uCAEEC,EAAM,CACR,8DACA,6BACA,0CACA,6BACA,2CACA,wDAGEC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWC,OAAOC,KAAKX,GAAKY,QACnDC,EAAM,GAERA,EAD+B,MAA7BH,OAAOI,OAAOd,GAAKM,GACfJ,EAEAC,EAER,IAAIY,EAAOhB,EAAIQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAIa,SAC7CI,OAAO,KACPA,OAAON,OAAOC,KAAKX,GAAKM,IACxBU,OAAO,KACPA,OAAOf,EAAIM,KAAKC,MAAMD,KAAKE,SAAWR,EAAIW,UAC1CI,OAAO,KACPA,OAAOH,EAAIN,KAAKC,MAAMD,KAAKE,SAAWI,EAAID,UAC1CI,OAAO,KACPA,OAAOZ,EAAIG,KAAKC,MAAMD,KAAKE,SAAWL,EAAIQ,UAAUI,OAAO,KAC3DA,OAAOX,EAAIE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIO,UAjF3B,EAkFIK,mBAASF,GAlFb,+BCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ebf0a06.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport \"./App.css\";\nimport { Grid, Segment, Button } from \"semantic-ui-react\";\n\nconst App = () => {\n  \n  let ar1 = [\n    \"Ale Numer.\",\n    \"Potwierdzone info!\",\n    \"Słów nie ma, co oni wyprawiają?\",\n    \"Puść dalej!\",\n    \"Szok! nie mogę uwierzyć...\",\n    \"A to już słyszałeś?\",\n    \"Zobacz to!\"\n  ];\n  var ar2 = {\n    \"Wiarygodne źródło,\": \"m\",\n    \"Moja koleżanka,\": \"f\",\n    \"Mój kuzyn\": \"m\",\n    \"Syn sąsiada\": \"m\",\n    \"Brat naszego proboszcza,\": \"m\",\n    \"Kumpel mojego szefa,\": \"m\",\n    \"Moja Bratowa,\": \"f\",\n    \"Znajomy mojego szwagra,\": \"m\"\n  };\n  let ar3 = [\n    \"z Instystutu Chorób zakaźnych\",\n    \"pracuje w strukturach rządowych i\",\n    \"oficer ABW,\",\n    \"lekarz-epidemiolog\",\n    \"dziennikarz w TVP,\",\n    \"dziennikarz w TVN,\",\n    \"szkolny kolega Agaty Dudy, no wiesz, prezydentowej,\"\n  ];\n  let ar4m = [\n    \"dał cynk że prezydent\",\n    \"właśnie pisze mi w mailu że rząd\",\n    \"wie na 100% że sejm\",\n    \"przysłał mi SMS-a że ministerstwo zdrowia\",\n    \"właśnie dostał komunikat że sztab WP\",\n    \"przypadkiem dowiadział się że premier\"\n  ];\n  let ar4f = [\n    \"dała cynk że prezydent\",\n    \"właśnie pisze mi w mailu że rząd\",\n    \"wie na 100% że sejm\",\n    \"przysłała mi SMS-a że ministerstwo zdrowia\",\n    \"właśnie dostała komunikat że sztab WP\",\n    \"przypadkiem dowiadziała się że premier\"\n  ];\n  let ar5 = [\n    \"jutro w nocy\",\n    \"w ciągu 24 godzin\",\n    \"za chwilę\",\n    \"w najbliższych godzinach\",\n    \"w najbliższą sobotę\",\n    \"na dniach\",\n    \"w najbliższym czasie\",\n    \"w najbliższy poniedziałek\"\n  ];\n  let ar6 = [\n    \"wyśle wszystkich 60+ do ośrodków izolacyjnych.\",\n    \"zamknie wjazd do warszawy.\",\n    \"nakaże zamknięcie sklepów.\",\n    \"wprowadzi wojsko na ulice.\",\n    \"ma zakazać używania gotówki\",\n    \"zablokuje konta bankowe osób na litery od A do L.\"\n  ]\n  \n  let rng2 = Math.floor(Math.random() * Object.keys(ar2).length);\n  let ar4 = [];\n  if (Object.values(ar2)[rng2] === \"m\") {\n    ar4 = ar4m;\n  } else {\n    ar4 = ar4f;\n  }\n  let orgstr=ar1[Math.floor(Math.random() * ar1.length)]\n  .concat(\" \")\n  .concat(Object.keys(ar2)[rng2])\n  .concat(\" \")\n  .concat(ar3[Math.floor(Math.random() * ar3.length)])\n  .concat(\" \")\n  .concat(ar4[Math.floor(Math.random() * ar4.length)])\n  .concat(\" \")\n  .concat(ar5[Math.floor(Math.random() * ar5.length)]).concat(\" \")\n  .concat(ar6[Math.floor(Math.random() * ar6.length)])\n  const[str,setStr] = useState(orgstr);\n  const handleNewRand = () => {\n    let rng2 = Math.floor(Math.random() * Object.keys(ar2).length);\n  let ar4 = [];\n  if (Object.values(ar2)[rng2] === \"m\") {\n    ar4 = ar4m;\n  } else {\n    ar4 = ar4f;\n  }\n  let newstr=ar1[Math.floor(Math.random() * ar1.length)]\n  .concat(\" \")\n  .concat(Object.keys(ar2)[rng2])\n  .concat(\" \")\n  .concat(ar3[Math.floor(Math.random() * ar3.length)])\n  .concat(\" \")\n  .concat(ar4[Math.floor(Math.random() * ar4.length)])\n  .concat(\" \")\n  .concat(ar5[Math.floor(Math.random() * ar5.length)]).concat(\" \")\n  .concat(ar6[Math.floor(Math.random() * ar6.length)])\n    setStr(newstr)\n  }\n  return (\n    // <div style={{display: 'flex',  justifyContent:'center', alignItems:'center', height: '100vh'}}>\n      <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Segment style={{backgroundColor: 'skyblue', padding: 20, borderRadius: 25}}>\n            <h3 style={{color: 'navy'}}>{str}</h3>  \n          </Segment>\n          <Button size='large' positive inverted content=\"Losuj\" onClick={handleNewRand}/>\n        </Grid.Column>\n      </Grid>\n      // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}